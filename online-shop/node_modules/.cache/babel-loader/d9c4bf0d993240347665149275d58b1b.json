{"ast":null,"code":"import _regeneratorRuntime from \"/Users/jackengels1/Desktop/Workspace/eBusiness/Ebusiness-Project/online-shop/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"/Users/jackengels1/Desktop/Workspace/eBusiness/Ebusiness-Project/online-shop/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"/Users/jackengels1/Desktop/Workspace/eBusiness/Ebusiness-Project/online-shop/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/jackengels1/Desktop/Workspace/eBusiness/Ebusiness-Project/online-shop/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jackengels1/Desktop/Workspace/eBusiness/Ebusiness-Project/online-shop/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jackengels1/Desktop/Workspace/eBusiness/Ebusiness-Project/online-shop/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jackengels1/Desktop/Workspace/eBusiness/Ebusiness-Project/online-shop/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jackengels1/Desktop/Workspace/eBusiness/Ebusiness-Project/online-shop/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jackengels1/Desktop/Workspace/eBusiness/Ebusiness-Project/online-shop/src/Components/mylogin/Login.js\";\nimport React, { Component } from \"react\"; //import { Row, FormGroup, FormControl, ControlLabel, Button, FormText } from 'react-bootstrap';\n\nimport './login.css';\nimport { isEmail, isEmpty, isLength, isContainWhiteSpace } from './validator';\nimport Loginlogo from './login.png';\nimport { NavLink } from \"react-router-dom\";\nimport { withRouter, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Auth from \"../../Auth\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport { setLoggedInUser } from \"../../Redux/Actions\";\nimport Avatar from '@material-ui/core/Avatar';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport './mylogin.css';\nimport db from './db';\nimport { encode } from \"base-64\";\n\nvar Login =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Login, _Component);\n\n  function Login(props) {\n    var _this;\n\n    _classCallCheck(this, Login);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Login).call(this, props));\n\n    _this.handleInputChange = function (event) {\n      var target = event.target;\n      var value = target.value;\n      var name = target.name;\n      var formData = _this.state.formData;\n      formData[name] = value;\n\n      _this.setState({\n        formData: formData\n      });\n    };\n\n    _this.validateLoginForm = function (e) {\n      var errors = {};\n      var formData = _this.state.formData;\n\n      if (isEmpty(formData.email)) {\n        errors.email = \"Email can't be blank\";\n        return errors;\n      } else if (!isEmail(formData.email)) {\n        errors.email = \"Please enter a valid email\";\n        return errors;\n      } else if (isEmpty(formData.password)) {\n        errors.password = \"Password can't be blank\";\n        return errors;\n      } else {\n        _this.validateUser(formData.email, formData.password);\n\n        setTimeout(function () {\n          if (_this.state.validateResponse.valid === true) {\n            alert(\"Login Successful\");\n\n            _this.props.history.push('/dark');\n\n            return true;\n          } else {\n            alert(\"Login Failed\");\n            errors.password = \"incorrect password\";\n            return false;\n          }\n        }, 1000);\n      }\n\n      return false;\n    };\n\n    _this.login = function (e) {\n      e.preventDefault();\n\n      var errors = _this.validateLoginForm();\n\n      if (errors === true) {\n        alert(\"You are successfully signed in...\");\n\n        _this.props.history.push('/dark');\n      } else {\n        _this.setState({\n          errors: errors,\n          formSubmitted: true\n        });\n      }\n    };\n\n    _this.state = {\n      user: null,\n      formData: {},\n      // Contains login form data\n      errors: {},\n      // Contains login field errors\n      formSubmitted: false,\n      // Indicates submit status of login form\n      loading: false,\n      // Indicates in progress state of login form\n      validateResponse: []\n    };\n    return _this;\n  }\n\n  _createClass(Login, [{\n    key: \"validateUser\",\n    value: function () {\n      var _validateUser = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(username, password) {\n        var _this2 = this;\n\n        var headers, usernameAuth, passwordAuth;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                headers = new Headers();\n                usernameAuth = '123';\n                passwordAuth = '123';\n                console.log(headers);\n                fetch('http://localhost:8080/validate/login', _defineProperty({\n                  method: 'POST',\n                  headers: new Headers({\n                    'Authorization': 'Basic ' + encode(usernameAuth + \":\" + passwordAuth),\n                    'Content-Type': 'application/json'\n                  }),\n                  body: JSON.stringify({\n                    userName: username,\n                    password: password\n                  })\n                }, \"headers\", {\n                  \"Content-type\": \"application/json; charset=UTF-8\"\n                })).then(function (response) {\n                  return response.json();\n                }).then(function (json) {\n                  _this2.setState({\n                    validateResponse: json\n                  });\n                });\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function validateUser(_x, _x2) {\n        return _validateUser.apply(this, arguments);\n      }\n\n      return validateUser;\n    }()\n  }, {\n    key: \"check\",\n    value: function check() {\n      var test = \"yess\";\n      var x = test.charAt(1);\n      console.log(x);\n    }\n  }, {\n    key: \"signOut\",\n    value: function signOut() {\n      this.setState({\n        user: null\n      });\n    }\n  }, {\n    key: \"signIn\",\n    value: function signIn(username, password) {\n      this.setState({\n        user: {\n          username: username,\n          password: password\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          errors = _this$state.errors,\n          formSubmitted = _this$state.formSubmitted;\n      return React.createElement(\"body\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"limiter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"container-login100\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        \"class-\": \"wrap-login100\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"lo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, React.createElement(Avatar, {\n        class: \"avatar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, React.createElement(LockOutlinedIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        class: \"log\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, \"Log in\")), React.createElement(\"form\", {\n        className: \"login100-form validate-form\",\n        onSubmit: this.login,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"wrap-input100\",\n        controlId: \"email\",\n        validationState: formSubmitted ? errors.email ? 'error' : 'success' : null,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"input100\",\n        type: \"text\",\n        name: \"email\",\n        placeholder: \"Enter your email\",\n        onChange: this.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }), errors.email && React.createElement(\"div\", {\n        class: \"errors\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, errors.email)), React.createElement(\"div\", {\n        controlId: \"password\",\n        validationState: formSubmitted ? errors.password ? 'error' : 'success' : null,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        class: \"input100\",\n        type: \"password\",\n        name: \"password\",\n        placeholder: \"Enter your password\",\n        onChange: this.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }), errors.password && React.createElement(\"div\", {\n        class: \"errors\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, errors.password)), React.createElement(\"div\", {\n        class: \"container-login100-form-btn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        class: \"login100-form-btn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, \"Login\")), db.j, React.createElement(NavLink, {\n        to: \"/Secure\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, \"do you not trust your device?\"), console.log(db.j))))));\n    }\n  }]);\n\n  return Login;\n}(Component);\n\nexport default Login;\n/*<div className=\"Home\">\r\n\r\n//                <h1>Login</h1>\r\n\r\n\r\n//                <Row>\r\n//                    <form onSubmit={this.login} >\r\n                        \r\n//                        <FormGroup class= \"wrap-input100\" controlId=\"email\" validationState={formSubmitted ? (errors.email ? 'error' : 'success') : null}>\r\n                            \r\n//                            <TextField  type=\"text\" name=\"email\" placeholder=\"Enter your email\" onChange={this.handleInputChange} />\r\n//                            {errors.email &&*\r\n//                                <HelpBlock>{errors.email}</HelpBlock>\r\n//                            }\r\n//                        </FormGroup>\r\n//                        <FormGroup controlId=\"password\" validationState={formSubmitted ? (errors.password ? 'error' : 'success') : null}>\r\n                           \r\n//                            <TextField type=\"password\" name=\"password\" placeholder=\"Enter your password\" onChange={this.handleInputChange} />\r\n//                            {errors.password &&\r\n//                                <HelpBlock>{errors.password}</HelpBlock>\r\n//                            }\r\n//                        </FormGroup>\r\n//                        <div class=\"btn\">\r\n//                            <button class=\"form-btn\">\r\n//                                Login\r\n//                                </button>\r\n//                            </div>\r\n//                    </form>\r\n//                </Row>\r\n\r\n\r\n//            </div>\r\n\r\n/*\r\nimport React, { Component } from \"react\";\r\nimport { withRouter, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport Auth from \"../../Auth\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { setLoggedInUser } from \"../../Redux/Actions\";\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport { NavLink, } from \"react-router-dom\";\r\nimport './mylogin.css';\r\nimport './login.css';\r\nclass ConnectedLogin extends Component {\r\n    state = {\r\n        userName: \"\",\r\n        pass: \"\",\r\n        redirectToReferrer: false\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        const { from } = this.props.location.state || { from: { pathname: \"/\" } };\r\n\r\n        // If user was authenticated, redirect her to where she came from.\r\n        if (this.state.redirectToReferrer === true) {\r\n            return <Redirect to={from} />;\r\n        }\r\n\r\n        return (\r\n            <div class=\"l\">\r\n                <div class=\"lo\">\r\n                    <Avatar class=\"avatar\">\r\n                        <LockOutlinedIcon />\r\n                    </Avatar>\r\n                    <div class=\"log\">\r\n                        {\" \"}\r\n                        Log in\r\n            {\" \"}\r\n                    </div>\r\n                    <TextField \r\n                        value={this.state.userName}\r\n                        placeholder=\"User name\"\r\n                        onChange={e => {\r\n                            this.setState({ userName: e.target.value });\r\n                        }}\r\n                    />\r\n                    <TextField \r\n                        value={this.state.pass}\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        onChange={e => {\r\n                            this.setState({ pass: e.target.value });\r\n                        }}\r\n                    />\r\n                    \r\n                    <div class=\"container-login100-form-btn\">\r\n                        <button class=\"login100-form-btn\" >\r\n                            Login\r\n                                </button>\r\n                    </div>\r\n                   \r\n                    <NavLink to=\"/Secure\">do you not trust your device?</NavLink>\r\n                    {this.state.wrongCred && (\r\n                        <div style={{ color: \"red\" }}>Wrong username and/or password</div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst Login = withRouter(connect()(ConnectedLogin));\r\n\r\nexport default Login;\r\n\r\n\r\n\r\n *  <Button\r\n                        style={{ marginTop: 20, width: 200 }}\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                        onClick={() => {\r\n\r\n                            // Simulate authentication call\r\n                            Auth.authenticate(this.state.userName, this.state.pass, user => {\r\n\r\n                                if (!user) {\r\n                                    this.setState({ wrongCred: true });\r\n                                    return;\r\n                                }\r\n\r\n                                this.props.dispatch(setLoggedInUser({ name: user.name }));\r\n                                this.setState(() => ({\r\n                                    redirectToReferrer: true\r\n                                }));\r\n                            });\r\n                        }}\r\n                    >\r\n                        Log in\r\n          </Button>\r\n          */","map":{"version":3,"sources":["/Users/jackengels1/Desktop/Workspace/eBusiness/Ebusiness-Project/online-shop/src/Components/mylogin/Login.js"],"names":["React","Component","isEmail","isEmpty","isLength","isContainWhiteSpace","Loginlogo","NavLink","withRouter","Redirect","connect","Auth","TextField","Button","setLoggedInUser","Avatar","LockOutlinedIcon","db","encode","Login","props","handleInputChange","event","target","value","name","formData","state","setState","validateLoginForm","e","errors","email","password","validateUser","setTimeout","validateResponse","valid","alert","history","push","login","preventDefault","formSubmitted","user","loading","username","headers","Headers","usernameAuth","passwordAuth","console","log","fetch","method","body","JSON","stringify","userName","then","response","json","test","x","charAt","j"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\n//import { Row, FormGroup, FormControl, ControlLabel, Button, FormText } from 'react-bootstrap';\r\nimport './login.css';\r\nimport { isEmail, isEmpty, isLength, isContainWhiteSpace } from './validator';\r\nimport Loginlogo from './login.png';\r\nimport { NavLink, } from \"react-router-dom\";\r\nimport { withRouter, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport Auth from \"../../Auth\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { setLoggedInUser } from \"../../Redux/Actions\";\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport './mylogin.css';\r\nimport db from './db';\r\nimport { encode } from \"base-64\";\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            user: null,\r\n            formData: {}, // Contains login form data\r\n            errors: {}, // Contains login field errors\r\n            formSubmitted: false, // Indicates submit status of login form\r\n            loading: false, // Indicates in progress state of login form\r\n            validateResponse: []\r\n        }\r\n\r\n\r\n    }\r\n\r\n    handleInputChange = (event) => {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n\r\n        let { formData } = this.state;\r\n        formData[name] = value;\r\n\r\n       this.setState({\r\n            formData: formData\r\n        });\r\n    }\r\n\r\n    validateLoginForm = (e) => {\r\n\r\n        let errors = {};\r\n        const { formData } = this.state;\r\n\r\n        if (isEmpty(formData.email)) {\r\n            errors.email = \"Email can't be blank\";\r\n            return errors;\r\n        } else if (!isEmail(formData.email)) {\r\n            errors.email = \"Please enter a valid email\";\r\n            return errors;\r\n        }\r\n\r\n        else if (isEmpty(formData.password)) {\r\n            errors.password = \"Password can't be blank\";\r\n            return errors;\r\n        }\r\n\r\n        else\r\n        {\r\n            this.validateUser(formData.email, formData.password);\r\n            setTimeout(()=>{\r\n            if(this.state.validateResponse.valid===true){\r\n                alert(\"Login Successful\");\r\n                this.props.history.push('/dark');\r\n                return true;\r\n            }\r\n            else{\r\n                alert(\"Login Failed\");\r\n                errors.password = \"incorrect password\";\r\n                return false\r\n            }\r\n            },1000);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    \r\n    async validateUser(username, password) {\r\n        let headers = new Headers();\r\n        let usernameAuth = '123';\r\n        let passwordAuth = '123';\r\n        console.log(headers)\r\n        fetch('http://localhost:8080/validate/login', {\r\n        method: 'POST',\r\n        headers: new Headers({\r\n        'Authorization': 'Basic ' + encode(usernameAuth + \":\" + passwordAuth),\r\n        'Content-Type': 'application/json'\r\n        }),\r\n        body: JSON.stringify({\r\n        userName: username,\r\n        password: password,\r\n      }),\r\n      headers: {\r\n        \"Content-type\": \"application/json; charset=UTF-8\"\r\n      }\r\n    }).then(response => {\r\n        return response.json()\r\n      }).then(json => {\r\n        this.setState({\r\n          validateResponse:json\r\n        });\r\n      });\r\n    }\r\n\r\n    check() {\r\n        var test = \"yess\";\r\n        var x = test.charAt(1);\r\n        console.log(x);\r\n    }\r\n    signOut() {\r\n        this.setState({ user: null })\r\n    }\r\n\r\n    signIn(username, password) {\r\n        this.setState({\r\n            user: {\r\n                username,\r\n                password,\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    login = (e) => {\r\n\r\n        e.preventDefault();\r\n        let errors = this.validateLoginForm();\r\n\r\n        if (errors === true) {\r\n            alert(\"You are successfully signed in...\");\r\n            this.props.history.push('/dark')\r\n\r\n\r\n        } else {\r\n            this.setState({\r\n                errors: errors,\r\n                formSubmitted: true\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const { errors, formSubmitted } = this.state;\r\n\r\n        return (\r\n           \r\n\r\n                    \r\n                        \r\n                        \r\n         \r\n            <body>\r\n                \r\n                <div class=\"limiter\">\r\n                    <div class=\"container-login100\">\r\n                        <div class-=\"wrap-login100\">\r\n                          \r\n                                <div class=\"lo\">\r\n                            <Avatar class=\"avatar\">\r\n                                <LockOutlinedIcon />\r\n                            </Avatar>\r\n                            <div class=\"log\">\r\n                                Log in\r\n                                </div>\r\n                                </div>\r\n                            <form className=\"login100-form validate-form\"  onSubmit={this.login}>\r\n                               \r\n\r\n                                    <div class=\"wrap-input100\" controlId=\"email\" validationState={formSubmitted ? (errors.email ? 'error' : 'success') : null}>\r\n\r\n                                        <input class=\"input100\" type=\"text\" name=\"email\" placeholder=\"Enter your email\" onChange={this.handleInputChange} />\r\n                                        {errors.email &&\r\n                                        <div class=\"errors\">{errors.email}</div>\r\n                                        }\r\n                                    </div>\r\n                                    <div controlId=\"password\" validationState={formSubmitted ? (errors.password ? 'error' : 'success') : null}>\r\n\r\n                                        <input class=\"input100\" type=\"password\" name=\"password\" placeholder=\"Enter your password\" onChange={this.handleInputChange} />\r\n                                    {errors.password &&\r\n                                        \r\n                                        <div class=\"errors\">{errors.password}</div>\r\n                                        }\r\n                                    </div>\r\n                                <div class=\"container-login100-form-btn\">\r\n                                    <button class=\"login100-form-btn\" >\r\n                                        Login\r\n                                </button>\r\n                                </div>\r\n                                {db.j}\r\n                                <NavLink to=\"/Secure\">do you not trust your device?</NavLink>\r\n                                {console.log(db.j)}\r\n                                \r\n                            </form>\r\n                            \r\n                        </div>\r\n                    </div>\r\n                </div >\r\n            </body>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*<div className=\"Home\">\r\n\r\n//                <h1>Login</h1>\r\n\r\n\r\n//                <Row>\r\n//                    <form onSubmit={this.login} >\r\n                        \r\n//                        <FormGroup class= \"wrap-input100\" controlId=\"email\" validationState={formSubmitted ? (errors.email ? 'error' : 'success') : null}>\r\n                            \r\n//                            <TextField  type=\"text\" name=\"email\" placeholder=\"Enter your email\" onChange={this.handleInputChange} />\r\n//                            {errors.email &&*\r\n//                                <HelpBlock>{errors.email}</HelpBlock>\r\n//                            }\r\n//                        </FormGroup>\r\n//                        <FormGroup controlId=\"password\" validationState={formSubmitted ? (errors.password ? 'error' : 'success') : null}>\r\n                           \r\n//                            <TextField type=\"password\" name=\"password\" placeholder=\"Enter your password\" onChange={this.handleInputChange} />\r\n//                            {errors.password &&\r\n//                                <HelpBlock>{errors.password}</HelpBlock>\r\n//                            }\r\n//                        </FormGroup>\r\n//                        <div class=\"btn\">\r\n//                            <button class=\"form-btn\">\r\n//                                Login\r\n//                                </button>\r\n//                            </div>\r\n//                    </form>\r\n//                </Row>\r\n\r\n\r\n//            </div>\r\n\r\n/*\r\nimport React, { Component } from \"react\";\r\nimport { withRouter, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport Auth from \"../../Auth\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { setLoggedInUser } from \"../../Redux/Actions\";\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport { NavLink, } from \"react-router-dom\";\r\nimport './mylogin.css';\r\nimport './login.css';\r\nclass ConnectedLogin extends Component {\r\n    state = {\r\n        userName: \"\",\r\n        pass: \"\",\r\n        redirectToReferrer: false\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        const { from } = this.props.location.state || { from: { pathname: \"/\" } };\r\n\r\n        // If user was authenticated, redirect her to where she came from.\r\n        if (this.state.redirectToReferrer === true) {\r\n            return <Redirect to={from} />;\r\n        }\r\n\r\n        return (\r\n            <div class=\"l\">\r\n                <div class=\"lo\">\r\n                    <Avatar class=\"avatar\">\r\n                        <LockOutlinedIcon />\r\n                    </Avatar>\r\n                    <div class=\"log\">\r\n                        {\" \"}\r\n                        Log in\r\n            {\" \"}\r\n                    </div>\r\n                    <TextField \r\n                        value={this.state.userName}\r\n                        placeholder=\"User name\"\r\n                        onChange={e => {\r\n                            this.setState({ userName: e.target.value });\r\n                        }}\r\n                    />\r\n                    <TextField \r\n                        value={this.state.pass}\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        onChange={e => {\r\n                            this.setState({ pass: e.target.value });\r\n                        }}\r\n                    />\r\n                    \r\n                    <div class=\"container-login100-form-btn\">\r\n                        <button class=\"login100-form-btn\" >\r\n                            Login\r\n                                </button>\r\n                    </div>\r\n                   \r\n                    <NavLink to=\"/Secure\">do you not trust your device?</NavLink>\r\n                    {this.state.wrongCred && (\r\n                        <div style={{ color: \"red\" }}>Wrong username and/or password</div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst Login = withRouter(connect()(ConnectedLogin));\r\n\r\nexport default Login;\r\n\r\n\r\n\r\n *  <Button\r\n                        style={{ marginTop: 20, width: 200 }}\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                        onClick={() => {\r\n\r\n                            // Simulate authentication call\r\n                            Auth.authenticate(this.state.userName, this.state.pass, user => {\r\n\r\n                                if (!user) {\r\n                                    this.setState({ wrongCred: true });\r\n                                    return;\r\n                                }\r\n\r\n                                this.props.dispatch(setLoggedInUser({ name: user.name }));\r\n                                this.setState(() => ({\r\n                                    redirectToReferrer: true\r\n                                }));\r\n                            });\r\n                        }}\r\n                    >\r\n                        Log in\r\n          </Button>\r\n          */\r\n"]},"metadata":{},"sourceType":"module"}